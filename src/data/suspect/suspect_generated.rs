// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SuspectOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Suspect<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Suspect<'a> {
  type Inner = Suspect<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Suspect<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_AGE: flatbuffers::VOffsetT = 6;
  pub const VT_FACE_IMG: flatbuffers::VOffsetT = 8;
  pub const VT_MOOD: flatbuffers::VOffsetT = 10;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 12;
  pub const VT_PATH: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Suspect { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SuspectArgs<'args>
  ) -> flatbuffers::WIPOffset<Suspect<'bldr>> {
    let mut builder = SuspectBuilder::new(_fbb);
    if let Some(x) = args.path { builder.add_path(x); }
    if let Some(x) = args.location { builder.add_location(x); }
    if let Some(x) = args.face_img { builder.add_face_img(x); }
    builder.add_age(args.age);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_mood(args.mood);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Suspect::VT_NAME, None)
  }
  #[inline]
  pub fn age(&self) -> u32 {
    self._tab.get::<u32>(Suspect::VT_AGE, Some(0)).unwrap()
  }
  #[inline]
  pub fn face_img(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Suspect::VT_FACE_IMG, None)
  }
  #[inline]
  pub fn mood(&self) -> Mood {
    self._tab.get::<Mood>(Suspect::VT_MOOD, Some(Mood::Happy)).unwrap()
  }
  #[inline]
  pub fn location(&self) -> Option<Location<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Location>>(Suspect::VT_LOCATION, None)
  }
  #[inline]
  pub fn path(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Location<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Location>>>>(Suspect::VT_PATH, None)
  }
}

impl flatbuffers::Verifiable for Suspect<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<u32>("age", Self::VT_AGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("face_img", Self::VT_FACE_IMG, false)?
     .visit_field::<Mood>("mood", Self::VT_MOOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Location>>("location", Self::VT_LOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Location>>>>("path", Self::VT_PATH, false)?
     .finish();
    Ok(())
  }
}
pub struct SuspectArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub age: u32,
    pub face_img: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mood: Mood,
    pub location: Option<flatbuffers::WIPOffset<Location<'a>>>,
    pub path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Location<'a>>>>>,
}
impl<'a> Default for SuspectArgs<'a> {
  #[inline]
  fn default() -> Self {
    SuspectArgs {
      name: None,
      age: 0,
      face_img: None,
      mood: Mood::Happy,
      location: None,
      path: None,
    }
  }
}
pub struct SuspectBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SuspectBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Suspect::VT_NAME, name);
  }
  #[inline]
  pub fn add_age(&mut self, age: u32) {
    self.fbb_.push_slot::<u32>(Suspect::VT_AGE, age, 0);
  }
  #[inline]
  pub fn add_face_img(&mut self, face_img: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Suspect::VT_FACE_IMG, face_img);
  }
  #[inline]
  pub fn add_mood(&mut self, mood: Mood) {
    self.fbb_.push_slot::<Mood>(Suspect::VT_MOOD, mood, Mood::Happy);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<Location<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Location>>(Suspect::VT_LOCATION, location);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Location<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Suspect::VT_PATH, path);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SuspectBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SuspectBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Suspect<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Suspect<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Suspect");
      ds.field("name", &self.name());
      ds.field("age", &self.age());
      ds.field("face_img", &self.face_img());
      ds.field("mood", &self.mood());
      ds.field("location", &self.location());
      ds.field("path", &self.path());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_suspect<'a>(buf: &'a [u8]) -> Suspect<'a> {
  unsafe { flatbuffers::root_unchecked::<Suspect<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_suspect<'a>(buf: &'a [u8]) -> Suspect<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Suspect<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Suspect`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_suspect_unchecked`.
pub fn root_as_suspect(buf: &[u8]) -> Result<Suspect, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Suspect>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Suspect` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_suspect_unchecked`.
pub fn size_prefixed_root_as_suspect(buf: &[u8]) -> Result<Suspect, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Suspect>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Suspect` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_suspect_unchecked`.
pub fn root_as_suspect_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Suspect<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Suspect<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Suspect` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_suspect_unchecked`.
pub fn size_prefixed_root_as_suspect_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Suspect<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Suspect<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Suspect and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Suspect`.
pub unsafe fn root_as_suspect_unchecked(buf: &[u8]) -> Suspect {
  flatbuffers::root_unchecked::<Suspect>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Suspect and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Suspect`.
pub unsafe fn size_prefixed_root_as_suspect_unchecked(buf: &[u8]) -> Suspect {
  flatbuffers::size_prefixed_root_unchecked::<Suspect>(buf)
}
#[inline]
pub fn finish_suspect_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Suspect<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_suspect_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Suspect<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
