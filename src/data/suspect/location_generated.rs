// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Location<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Location<'a> {
  type Inner = Location<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Location<'a> {
  pub const VT_POS: flatbuffers::VOffsetT = 4;
  pub const VT_STREET: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Location { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LocationArgs<'args>
  ) -> flatbuffers::WIPOffset<Location<'bldr>> {
    let mut builder = LocationBuilder::new(_fbb);
    if let Some(x) = args.street { builder.add_street(x); }
    if let Some(x) = args.pos { builder.add_pos(x); }
    builder.finish()
  }


  #[inline]
  pub fn pos(&self) -> Option<&'a Position> {
    self._tab.get::<Position>(Location::VT_POS, None)
  }
  #[inline]
  pub fn street(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Location::VT_STREET, None)
  }
}

impl flatbuffers::Verifiable for Location<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Position>("pos", Self::VT_POS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("street", Self::VT_STREET, false)?
     .finish();
    Ok(())
  }
}
pub struct LocationArgs<'a> {
    pub pos: Option<&'a Position>,
    pub street: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocationArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocationArgs {
      pos: None,
      street: None,
    }
  }
}
pub struct LocationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LocationBuilder<'a, 'b> {
  #[inline]
  pub fn add_pos(&mut self, pos: &Position) {
    self.fbb_.push_slot_always::<&Position>(Location::VT_POS, pos);
  }
  #[inline]
  pub fn add_street(&mut self, street: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Location::VT_STREET, street);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LocationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LocationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Location<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Location<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Location");
      ds.field("pos", &self.pos());
      ds.field("street", &self.street());
      ds.finish()
  }
}
